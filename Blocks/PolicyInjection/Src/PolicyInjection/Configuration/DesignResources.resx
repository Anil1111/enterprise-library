<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddPolicyInjectionSettings" xml:space="preserve">
    <value>Add Policy Injection Settings</value>
  </data>
  <data name="AssemblyMatchingRuleDataDescription" xml:space="preserve">
    <value>661 - A Matching Rule that selects target classes based on the assembly name or by specifying a reference to an assembly.</value>
  </data>
  <data name="AssemblyMatchingRuleDataDisplayName" xml:space="preserve">
    <value>Assembly Matching Rule</value>
  </data>
  <data name="AssemblyMatchingRuleDataMatchDescription" xml:space="preserve">
    <value>663 - The name of the assembly to match. It can be the name and version; the name, version and culture; or the full assembly name of the assembly excluding the .dll file name extension. It cannot include wildcard characters. </value>
  </data>
  <data name="AssemblyMatchingRuleDataMatchDisplayName" xml:space="preserve">
    <value>Assembly Name</value>
  </data>
  <data name="AssemblyMatchingRuleDataNameDescription" xml:space="preserve">
    <value>665 - The name of the Assembly Matching Rule.</value>
  </data>
  <data name="AssemblyMatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="AssemblyMatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>667 - The fully qualified type name of the Assembly Matching Rule.</value>
  </data>
  <data name="AssemblyMatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="CallHandlerDataDescription" xml:space="preserve">
    <value>669 - A base class for all Call Handlers.</value>
  </data>
  <data name="CallHandlerDataDisplayName" xml:space="preserve">
    <value>Call Handler</value>
  </data>
  <data name="CallHandlerDataNameDescription" xml:space="preserve">
    <value>671 - The name of the Call Handler.</value>
  </data>
  <data name="CallHandlerDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="CallHandlerDataOrderDescription" xml:space="preserve">
    <value>673 - The position of the handler within the policy handler chain, starting from 1. The default value is zero, which means that there is no explicit order specified for the handler in relation to other handlers in the same handler chain.</value>
  </data>
  <data name="CallHandlerDataOrderDisplayName" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="CallHandlerDataTypeNameDescription" xml:space="preserve">
    <value>675 - The fully qualified type name of the Call Handler.</value>
  </data>
  <data name="CallHandlerDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="CustomAttributeMatchingRuleDataAttributeTypeNameDescription" xml:space="preserve">
    <value>679 - The type name of the custom attribute that is applied to members of the target object.</value>
  </data>
  <data name="CustomAttributeMatchingRuleDataAttributeTypeNameDisplayName" xml:space="preserve">
    <value>Attribute Type Name</value>
  </data>
  <data name="CustomAttributeMatchingRuleDataDescription" xml:space="preserve">
    <value>677 - A Matching Rule that selects target classes and class members based on a custom attribute type that is applied to class members.</value>
  </data>
  <data name="CustomAttributeMatchingRuleDataDisplayName" xml:space="preserve">
    <value>Custom Attribute Matching Rule</value>
  </data>
  <data name="CustomAttributeMatchingRuleDataNameDescription" xml:space="preserve">
    <value>681 - The name of the Custom Attribute Matching Rule.</value>
  </data>
  <data name="CustomAttributeMatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="CustomAttributeMatchingRuleDataSearchInheritanceChainDescription" xml:space="preserve">
    <value>683 - Specifies whether the rule should also search base classes for members that carry the custom attribute.</value>
  </data>
  <data name="CustomAttributeMatchingRuleDataSearchInheritanceChainDisplayName" xml:space="preserve">
    <value>Search Inheritance Chain</value>
  </data>
  <data name="CustomAttributeMatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>685 - The fully qualified type name of the Custom Attribute Matching Rule.</value>
  </data>
  <data name="CustomAttributeMatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="CustomCallHandlerDataAddCommand" xml:space="preserve">
    <value>Custom Call Handler (using type picker)</value>
  </data>
  <data name="CustomCallHandlerDataDescription" xml:space="preserve">
    <value>687 - A custom implementation of a Call Handler that is added to Enterprise Library.</value>
  </data>
  <data name="CustomCallHandlerDataDisplayName" xml:space="preserve">
    <value>Custom Call Handler</value>
  </data>
  <data name="CustomCallHandlerDataNameDescription" xml:space="preserve">
    <value>689 - The name of the Custom Call Handler.</value>
  </data>
  <data name="CustomCallHandlerDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="CustomCallHandlerDataOrderDescription" xml:space="preserve">
    <value>691 - The position of the handler within the policy handler chain, starting from 1. The default value is zero, which means that there is no explicit order specified for the handler in relation to other handlers in the same handler chain.</value>
  </data>
  <data name="CustomCallHandlerDataOrderDisplayName" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="CustomCallHandlerDataTypeNameDescription" xml:space="preserve">
    <value>693 - The fully qualified type name of the Custom Call Handler.</value>
  </data>
  <data name="CustomCallHandlerDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="CustomMatchingRuleDataAddCommand" xml:space="preserve">
    <value>Custom Matching Rule (using type picker)</value>
  </data>
  <data name="CustomMatchingRuleDataDescription" xml:space="preserve">
    <value>695 - A custom implementation of a Matching Rule that is added to Enterprise Library.</value>
  </data>
  <data name="CustomMatchingRuleDataDisplayName" xml:space="preserve">
    <value>Custom Matching Rule</value>
  </data>
  <data name="CustomMatchingRuleDataNameDescription" xml:space="preserve">
    <value>697 - The name of the Custom Matching Rule.</value>
  </data>
  <data name="CustomMatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="CustomMatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>699 - The fully qualified type name of the Custom Matching Rule.</value>
  </data>
  <data name="CustomMatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="MatchDataCollectionDescription" xml:space="preserve">
    <value>707 - A  collection of matches for a Matching Rule.</value>
  </data>
  <data name="MatchDataCollectionDisplayName" xml:space="preserve">
    <value>Match Data Collection</value>
  </data>
  <data name="MatchDataDescription" xml:space="preserve">
    <value>701 - A class that holds information about a single match for a Matching Rule, such as the string to match and whether the match is case-sensitive.</value>
  </data>
  <data name="MatchDataDisplayName" xml:space="preserve">
    <value>Match</value>
  </data>
  <data name="MatchDataIgnoreCaseDescription" xml:space="preserve">
    <value>703 - Specifies whether the match should be carried out on a case-sensitive basis. The default is false.</value>
  </data>
  <data name="MatchDataIgnoreCaseDisplayName" xml:space="preserve">
    <value>Ignore Case</value>
  </data>
  <data name="MatchDataMatchDescription" xml:space="preserve">
    <value>705 - The string value the Matching Rule will compare to class, member, or parameter names.</value>
  </data>
  <data name="MatchDataMatchDisplayName" xml:space="preserve">
    <value>Match</value>
  </data>
  <data name="MatchingRuleDataDescription" xml:space="preserve">
    <value>709 - A base class for all Matching Rules.</value>
  </data>
  <data name="MatchingRuleDataDisplayName" xml:space="preserve">
    <value>Matching Rule</value>
  </data>
  <data name="MatchingRuleDataNameDescription" xml:space="preserve">
    <value>711 - The name of the Matching Rule.</value>
  </data>
  <data name="MatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="MatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>713 - The fully qualified type name of the Matching Rule.</value>
  </data>
  <data name="MatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="MemberNameMatchingRuleDataDescription" xml:space="preserve">
    <value>715 - A Matching Rule that selects target classes and class members based on the names of the class members (methods or properties). Wildcard characters can be used for the member name.</value>
  </data>
  <data name="MemberNameMatchingRuleDataDisplayName" xml:space="preserve">
    <value>Member Name Matching Rule</value>
  </data>
  <data name="MemberNameMatchingRuleDataMatchesDescription" xml:space="preserve">
    <value>717 - The collection of method and property names to match. Wildcard characters can be included.</value>
  </data>
  <data name="MemberNameMatchingRuleDataMatchesDisplayName" xml:space="preserve">
    <value>Member Names</value>
  </data>
  <data name="MemberNameMatchingRuleDataNameDescription" xml:space="preserve">
    <value>719 - The name of the Member Name Matching Rule.</value>
  </data>
  <data name="MemberNameMatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="MemberNameMatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>721 - The fully qualified type name of the Member Name Matching Rule.</value>
  </data>
  <data name="MemberNameMatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="MethodSignatureMatchingRuleDataDescription" xml:space="preserve">
    <value>723 - A Matching Rule that selects target classes and class members based on the name and signature (the list of parameter types) of its members. This rule allows the use of wildcard characters for the member names.</value>
  </data>
  <data name="MethodSignatureMatchingRuleDataDisplayName" xml:space="preserve">
    <value>Method Signature Matching Rule</value>
  </data>
  <data name="MethodSignatureMatchingRuleDataIgnoreCaseDescription" xml:space="preserve">
    <value>725 - Specifies whether the match should be carried out on a case-sensitive basis. The default is false.</value>
  </data>
  <data name="MethodSignatureMatchingRuleDataIgnoreCaseDisplayName" xml:space="preserve">
    <value>Ignore Case</value>
  </data>
  <data name="MethodSignatureMatchingRuleDataMatchDescription" xml:space="preserve">
    <value>727 - The name of the method to match. Wildcard characters can be included.</value>
  </data>
  <data name="MethodSignatureMatchingRuleDataMatchDisplayName" xml:space="preserve">
    <value>Method Name</value>
  </data>
  <data name="MethodSignatureMatchingRuleDataNameDescription" xml:space="preserve">
    <value>729 - The name of the Method Signature Matching Rule.</value>
  </data>
  <data name="MethodSignatureMatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="MethodSignatureMatchingRuleDataParametersDescription" xml:space="preserve">
    <value>731 - The collection of parameter type names (not the parameter names) that make up the matching method signature.</value>
  </data>
  <data name="MethodSignatureMatchingRuleDataParametersDisplayName" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="MethodSignatureMatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>733 - The fully qualified type name of the Method Signature Matching Rule.</value>
  </data>
  <data name="MethodSignatureMatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="NamespaceMatchingRuleDataDescription" xml:space="preserve">
    <value>735 - A Matching Rule that selects target classes and class members based on their namespace name, using wildcard characters for the child namespace names but not for the root namespace name.</value>
  </data>
  <data name="NamespaceMatchingRuleDataDisplayName" xml:space="preserve">
    <value>Namespace Matching Rule</value>
  </data>
  <data name="NamespaceMatchingRuleDataMatchesDescription" xml:space="preserve">
    <value>737 - The collection of namespaces to match. Wildcard characters an be used for the child namespace names but not for the root namespace name.</value>
  </data>
  <data name="NamespaceMatchingRuleDataMatchesDisplayName" xml:space="preserve">
    <value>Namespaces</value>
  </data>
  <data name="NamespaceMatchingRuleDataNameDescription" xml:space="preserve">
    <value>739 - The name of the Namespace Matching Rule.</value>
  </data>
  <data name="NamespaceMatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NamespaceMatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>741 - The fully qualified type name of the Namespace Matching Rule.</value>
  </data>
  <data name="NamespaceMatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="ParameterTypeElementDataCollectionDescription" xml:space="preserve">
    <value>749 - The collection of parameter types to match. The type name can be a fully qualified type name or just the class name. Each match also specifies whether the match is case-sensitive, and the parameter kind (which must be one of Input, Output, InputOrOutput, and ReturnValue).</value>
  </data>
  <data name="ParameterTypeElementDataCollectionDisplayName" xml:space="preserve">
    <value>Parameter Type Element Data Collection</value>
  </data>
  <data name="ParameterTypeElementDescription" xml:space="preserve">
    <value>743 - The type name, case-sensitivity, and usage for an individual parameter type to match. The type name can be a fully qualified type name or just the class name.</value>
  </data>
  <data name="ParameterTypeElementDisplayName" xml:space="preserve">
    <value>Parameter Type Element</value>
  </data>
  <data name="ParameterTypeElementNameDescription" xml:space="preserve">
    <value>745 - A unique ID for this parameter. This name does not need to match the corresponding parameter in the target types; only the type is used.</value>
  </data>
  <data name="ParameterTypeElementNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ParameterTypeElementParameterTypeNameDescription" xml:space="preserve">
    <value>747 - An individual parameter type to match. The type name can be a fully qualified type name or just the class name.</value>
  </data>
  <data name="ParameterTypeElementParameterTypeNameDisplayName" xml:space="preserve">
    <value>Parameter Type Name</value>
  </data>
  <data name="ParameterTypeMatchDataDescription" xml:space="preserve">
    <value>751 - The type name, case-sensitivity, and usage for an individual parameter type to match. The type name can be a fully qualified type name or just the class name.</value>
  </data>
  <data name="ParameterTypeMatchDataDisplayName" xml:space="preserve">
    <value>Parameter Type Match</value>
  </data>
  <data name="ParameterTypeMatchDataIgnoreCaseDescription" xml:space="preserve">
    <value>753 - Specifies whether the match should be carried out on a case-sensitive basis. The default is false.</value>
  </data>
  <data name="ParameterTypeMatchDataIgnoreCaseDisplayName" xml:space="preserve">
    <value>Ignore Case</value>
  </data>
  <data name="ParameterTypeMatchDataMatchDescription" xml:space="preserve">
    <value>755 - An individual parameter type to match. The type name can be a fully qualified type name or just the class name.</value>
  </data>
  <data name="ParameterTypeMatchDataMatchDisplayName" xml:space="preserve">
    <value>Parameter Type</value>
  </data>
  <data name="ParameterTypeMatchDataParameterKindDescription" xml:space="preserve">
    <value>757 - The usage of the parameter as a value from the ParameterKind enumeration. Valid values are Input, Output, InputOrOutput, and ReturnValue.</value>
  </data>
  <data name="ParameterTypeMatchDataParameterKindDisplayName" xml:space="preserve">
    <value>Parameter Kind</value>
  </data>
  <data name="ParameterTypeMatchingRuleDataDescription" xml:space="preserve">
    <value>759 - A Matching Rule that selects target classes and class members based on the type name of a parameter for a member of the target object.</value>
  </data>
  <data name="ParameterTypeMatchingRuleDataDisplayName" xml:space="preserve">
    <value>Parameter Type Matching Rule</value>
  </data>
  <data name="ParameterTypeMatchingRuleDataMatchesDescription" xml:space="preserve">
    <value>761 - The collection of parameter types to match. The type name can be a fully qualified type name or just the class name. Each match also specifies whether the match is case-sensitive, and the parameter kind (which must be one of Input, Output, InputOrOutput, and ReturnValue).</value>
  </data>
  <data name="ParameterTypeMatchingRuleDataMatchesDisplayName" xml:space="preserve">
    <value>Parameter Types</value>
  </data>
  <data name="ParameterTypeMatchingRuleDataNameDescription" xml:space="preserve">
    <value>763 - The name of the Parameter Type Matching Rule.</value>
  </data>
  <data name="ParameterTypeMatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ParameterTypeMatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>765 - The fully qualified type name of the Parameter Type Matching Rule.</value>
  </data>
  <data name="ParameterTypeMatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="PolicyDataDescription" xml:space="preserve">
    <value>767 - A set of Matching Rules that select types and their members, and a set of Call Handlers that will execute when calls are made to these types and their members.</value>
  </data>
  <data name="PolicyDataDisplayName" xml:space="preserve">
    <value>Policy</value>
  </data>
  <data name="PolicyDataHandlersDescription" xml:space="preserve">
    <value>769 - The set of Call Handlers for this Policy.</value>
  </data>
  <data name="PolicyDataHandlersDisplayName" xml:space="preserve">
    <value>Handlers</value>
  </data>
  <data name="PolicyDataMatchingRulesDescription" xml:space="preserve">
    <value>771 - The set of Matching Rules for this Policy.</value>
  </data>
  <data name="PolicyDataMatchingRulesDisplayName" xml:space="preserve">
    <value>Matching Rules</value>
  </data>
  <data name="PolicyDataNameDescription" xml:space="preserve">
    <value>773 - The name of the Policy.</value>
  </data>
  <data name="PolicyDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PolicyInjectionSettingsDescription" xml:space="preserve">
    <value>775 - Configuration settings for the Policy Injection Application Block.</value>
  </data>
  <data name="PolicyInjectionSettingsDisplayName" xml:space="preserve">
    <value>Policy Injection Settings</value>
  </data>
  <data name="PolicyInjectionSettingsPoliciesDescription" xml:space="preserve">
    <value>777 - The set of Policies configured for the Policy Injection Application Block.</value>
  </data>
  <data name="PolicyInjectionSettingsPoliciesDisplayName" xml:space="preserve">
    <value>Policies</value>
  </data>
  <data name="PropertyMatchDataDescription" xml:space="preserve">
    <value>779 - A class that contains details of a property to match. It includes the property name, whether the match is case-sensitive, and a value from the PropertyMatchingOption enumeration that indicates if the rule should match on the Get, Set, or both the accessors for a selected parameter. Valid values for this are Get, Set, and GetOrSet.</value>
  </data>
  <data name="PropertyMatchDataDisplayName" xml:space="preserve">
    <value>Property Match</value>
  </data>
  <data name="PropertyMatchDataIgnoreCaseDescription" xml:space="preserve">
    <value>781 - Specifies whether the match should be carried out on a case-sensitive basis. The default is false.</value>
  </data>
  <data name="PropertyMatchDataIgnoreCaseDisplayName" xml:space="preserve">
    <value>Ignore Case</value>
  </data>
  <data name="PropertyMatchDataMatchDescription" xml:space="preserve">
    <value>783 - The name of a property to match. It can include or consist of the * or ? wildcard characters to select multiple properties, and may use square brackets [ ] to specify a range of characters.</value>
  </data>
  <data name="PropertyMatchDataMatchDisplayName" xml:space="preserve">
    <value>Property Name</value>
  </data>
  <data name="PropertyMatchDataMatchOptionDescription" xml:space="preserve">
    <value>785 - A value from the PropertyMatchingOption enumeration that indicates if the rule should match on the Get, Set, or both the accessors for a selected parameter. Valid values are Get, Set, and GetOrSet.</value>
  </data>
  <data name="PropertyMatchDataMatchOptionDisplayName" xml:space="preserve">
    <value>Match Option</value>
  </data>
  <data name="PropertyMatchingRuleDataDescription" xml:space="preserve">
    <value>787 - A Matching Rule that selects target classes and class members based on their name, including using wildcard characters, and the combination of accessors they implement.</value>
  </data>
  <data name="PropertyMatchingRuleDataDisplayName" xml:space="preserve">
    <value>Property Matching Rule</value>
  </data>
  <data name="PropertyMatchingRuleDataMatchesDescription" xml:space="preserve">
    <value>789 - The collection of  match details containing the property names, case-sensitivity, and accessor details to match.</value>
  </data>
  <data name="PropertyMatchingRuleDataMatchesDisplayName" xml:space="preserve">
    <value>Properties</value>
  </data>
  <data name="PropertyMatchingRuleDataNameDescription" xml:space="preserve">
    <value>791 - The name of the Property Matching Rule.</value>
  </data>
  <data name="PropertyMatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="PropertyMatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>793 - The fully qualified type name of the Property Matching Rule.</value>
  </data>
  <data name="PropertyMatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="ReturnTypeMatchingRuleDataDescription" xml:space="preserve">
    <value>795 - A Matching Rule that selects target classes and class members based on the type of the return value.</value>
  </data>
  <data name="ReturnTypeMatchingRuleDataDisplayName" xml:space="preserve">
    <value>Return Type Matching Rule</value>
  </data>
  <data name="ReturnTypeMatchingRuleDataIgnoreCaseDescription" xml:space="preserve">
    <value>797 - Specifies whether the match should be carried out on a case-sensitive basis. The default is false.</value>
  </data>
  <data name="ReturnTypeMatchingRuleDataIgnoreCaseDisplayName" xml:space="preserve">
    <value>Ignore Case</value>
  </data>
  <data name="ReturnTypeMatchingRuleDataMatchDescription" xml:space="preserve">
    <value>799 - The fully qualified type name of the type of the return value of the method to match, or just the type name. </value>
  </data>
  <data name="ReturnTypeMatchingRuleDataMatchDisplayName" xml:space="preserve">
    <value>Return Type</value>
  </data>
  <data name="ReturnTypeMatchingRuleDataNameDescription" xml:space="preserve">
    <value>801 - The name of the Return Type Matching Rule.</value>
  </data>
  <data name="ReturnTypeMatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ReturnTypeMatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>803 - The fully qualified type name of the Return Type Matching Rule.</value>
  </data>
  <data name="ReturnTypeMatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="StringBasedMatchingRuleDataDescription" xml:space="preserve">
    <value>805 - A base class for Matching Rules that selects target classes and class members using string matches.</value>
  </data>
  <data name="StringBasedMatchingRuleDataDisplayName" xml:space="preserve">
    <value>String Based Matching Rule</value>
  </data>
  <data name="StringBasedMatchingRuleDataIgnoreCaseDescription" xml:space="preserve">
    <value>807 - Specifies whether the match should be carried out on a case-sensitive basis. The default is false.</value>
  </data>
  <data name="StringBasedMatchingRuleDataIgnoreCaseDisplayName" xml:space="preserve">
    <value>Ignore Case</value>
  </data>
  <data name="StringBasedMatchingRuleDataMatchDescription" xml:space="preserve">
    <value>809 - The string to match.</value>
  </data>
  <data name="StringBasedMatchingRuleDataMatchDisplayName" xml:space="preserve">
    <value>Match</value>
  </data>
  <data name="StringBasedMatchingRuleDataNameDescription" xml:space="preserve">
    <value>811 - The name of the String Based Matching Rule.</value>
  </data>
  <data name="StringBasedMatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="StringBasedMatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>813 - The fully qualified type name of the String Based Matching Rule.</value>
  </data>
  <data name="StringBasedMatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="TagAttributeMatchingRuleDataDescription" xml:space="preserve">
    <value>815 - A Matching Rule that selects target classes and class members based on the name of an attribute of type Tag that is applied to a class, or to members (methods or properties) within a class.</value>
  </data>
  <data name="TagAttributeMatchingRuleDataDisplayName" xml:space="preserve">
    <value>Tag Attribute Matching Rule</value>
  </data>
  <data name="TagAttributeMatchingRuleDataIgnoreCaseDescription" xml:space="preserve">
    <value>817 - Specifies whether the match should be carried out on a case-sensitive basis. The default is false.</value>
  </data>
  <data name="TagAttributeMatchingRuleDataIgnoreCaseDisplayName" xml:space="preserve">
    <value>Ignore Case</value>
  </data>
  <data name="TagAttributeMatchingRuleDataMatchDescription" xml:space="preserve">
    <value>819 - The name of the Tag attribute applied to the target object. It cannot include wildcard characters.</value>
  </data>
  <data name="TagAttributeMatchingRuleDataMatchDisplayName" xml:space="preserve">
    <value>Tag Attribute Name</value>
  </data>
  <data name="TagAttributeMatchingRuleDataNameDescription" xml:space="preserve">
    <value>821 - The name of the Tag Attribute Matching Rule.</value>
  </data>
  <data name="TagAttributeMatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="TagAttributeMatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>823 - The fully qualified type name of the Tag Attribute Matching Rule.</value>
  </data>
  <data name="TagAttributeMatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="TypeMatchingRuleDataDescription" xml:space="preserve">
    <value>825 - A Matching Rule that selects target classes and class members based on the namespace and class name of the target type.</value>
  </data>
  <data name="TypeMatchingRuleDataDisplayName" xml:space="preserve">
    <value>Type Matching Rule</value>
  </data>
  <data name="TypeMatchingRuleDataMatchesDescription" xml:space="preserve">
    <value>827 - The collection of  matches for types, including the type name and the case sensitivity. The type name may include the full namespace and class name of the target object, or just the class name.</value>
  </data>
  <data name="TypeMatchingRuleDataMatchesDisplayName" xml:space="preserve">
    <value>Type Matches</value>
  </data>
  <data name="TypeMatchingRuleDataNameDescription" xml:space="preserve">
    <value>829 - The name of the Type Matching Rule.</value>
  </data>
  <data name="TypeMatchingRuleDataNameDisplayName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="TypeMatchingRuleDataTypeNameDescription" xml:space="preserve">
    <value>831 - The fully qualified type name of the Type Matching Rule.</value>
  </data>
  <data name="TypeMatchingRuleDataTypeNameDisplayName" xml:space="preserve">
    <value>Type</value>
  </data>
</root>