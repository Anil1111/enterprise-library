<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddAssemblyMatchingRuleCommandText" xml:space="preserve">
    <value>Assembly Matching Rule</value>
  </data>
  <data name="AddAssemblyMatchingRuleCommandTextLong" xml:space="preserve">
    <value>Add Assembly Matching Rule.</value>
  </data>
  <data name="AddCustomAttributeMatchingRuleCommandText" xml:space="preserve">
    <value>Custom Attribute Matching Rule</value>
  </data>
  <data name="AddCustomAttributeMatchingRuleCommandTextLong" xml:space="preserve">
    <value>Add Custom Attribute Matching Rule.</value>
  </data>
  <data name="AddCustomInjectorCommandText" xml:space="preserve">
    <value>Custom Policy Injector</value>
  </data>
  <data name="AddCustomInjectorCommandTextLong" xml:space="preserve">
    <value>Add Custom Policy Injector</value>
  </data>
  <data name="AddCustomMatchingRuleCommandText" xml:space="preserve">
    <value>Custom Matching Rule</value>
  </data>
  <data name="AddCustomMatchingRuleCommandTextLong" xml:space="preserve">
    <value>Add Custom Matching Rule.</value>
  </data>
  <data name="AddMemberNameMatchingRuleCommandText" xml:space="preserve">
    <value>Member Name Matching Rule</value>
  </data>
  <data name="AddMemberNameMatchingRuleCommandTextLong" xml:space="preserve">
    <value>Add Member Name Matching Rule.</value>
  </data>
  <data name="AddMethodSignatureMatchingRuleCommandText" xml:space="preserve">
    <value>Method Signature Matching Rule</value>
  </data>
  <data name="AddMethodSignatureMatchingRuleCommandTextLong" xml:space="preserve">
    <value>Add Method Signature Matching Rule.</value>
  </data>
  <data name="AddNamespaceMatchingRuleCommandText" xml:space="preserve">
    <value>Namespace Matching Rule</value>
  </data>
  <data name="AddNamespaceMatchingRuleCommandTextLong" xml:space="preserve">
    <value>Add Namespace Matching Rule.</value>
  </data>
  <data name="AddParameterTypeMatchingRuleCommandText" xml:space="preserve">
    <value>Parameter Type Matching Rule</value>
  </data>
  <data name="AddParameterTypeMatchingRuleCommandTextLong" xml:space="preserve">
    <value>Add Parameter Type Matching Rule.</value>
  </data>
  <data name="AddPolicyCommandText" xml:space="preserve">
    <value>Policy</value>
  </data>
  <data name="AddPolicyCommandTextLong" xml:space="preserve">
    <value>Add Policy.</value>
  </data>
  <data name="AddPolicyInjectionSettingsCommandText" xml:space="preserve">
    <value>Policy Injection Application Block</value>
  </data>
  <data name="AddPolicyInjectionSettingsCommandTextLong" xml:space="preserve">
    <value>Add the Policy Injection Application Block.</value>
  </data>
  <data name="AddPropertyMatchingRuleCommandText" xml:space="preserve">
    <value>Property Matching Rule</value>
  </data>
  <data name="AddPropertyMatchingRuleCommandTextLong" xml:space="preserve">
    <value>Add Property Matching Rule.</value>
  </data>
  <data name="AddRemotingInjectorCommandText" xml:space="preserve">
    <value>Remoting Policy Injector</value>
  </data>
  <data name="AddRemotingInjectorCommandTextLong" xml:space="preserve">
    <value>Add Remoting Policy Injector</value>
  </data>
  <data name="AddReturnTypeMatchingRuleCommandText" xml:space="preserve">
    <value>Return Type Matching Rule</value>
  </data>
  <data name="AddReturnTypeMatchingRuleCommandTextLong" xml:space="preserve">
    <value>Add Return Type Matching Rule.</value>
  </data>
  <data name="AddTypeMatchingRuleCommandText" xml:space="preserve">
    <value>Type Matching Rule</value>
  </data>
  <data name="AddTypeMatchingRuleTextLong" xml:space="preserve">
    <value>Add Type Matching Rule.</value>
  </data>
  <data name="AssemblyMatchingRule" xml:space="preserve">
    <value>Assembly Matching Rule</value>
  </data>
  <data name="AssemblyNameDescription" xml:space="preserve">
    <value>The assembly name to match in 'Name (Version=?) (Culture=?) (PublicKeyToken=?) ' -format.</value>
  </data>
  <data name="AttributeTypeDescription" xml:space="preserve">
    <value>The type of the attribute that should be used to match.</value>
  </data>
  <data name="CallHandlersCollectionNodeName" xml:space="preserve">
    <value>Handlers</value>
  </data>
  <data name="CategoryGeneral" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="CustomAttributeMatchingRuleNodeName" xml:space="preserve">
    <value>Custom Attribute Matching Rule</value>
  </data>
  <data name="CustomInjectorNodeName" xml:space="preserve">
    <value>Custom Policy Injector</value>
  </data>
  <data name="CustomMatchingRuleNodeName" xml:space="preserve">
    <value>Custom Matching Rule</value>
  </data>
  <data name="DefaultInjectorDescription" xml:space="preserve">
    <value>The injector used to create policy-enabled objects</value>
  </data>
  <data name="DefaultMatchingRuleAssemblyName" xml:space="preserve">
    <value />
  </data>
  <data name="DefaultMethodSignatureMatchValue" xml:space="preserve">
    <value />
  </data>
  <data name="DefaultReturnTypeMatchValue" xml:space="preserve">
    <value />
  </data>
  <data name="DefaultTagValue" xml:space="preserve">
    <value />
  </data>
  <data name="InjectorCollectionNodeDescription" xml:space="preserve">
    <value>The collection of injection methods available to use. This determines the default injector to use.</value>
  </data>
  <data name="InjectorCollectionNodeName" xml:space="preserve">
    <value>Injectors</value>
  </data>
  <data name="InjectorExtensionsDescription" xml:space="preserve">
    <value>Gets or sets the custom configuration attributes for this type.</value>
  </data>
  <data name="InjectorTypeNameDescription" xml:space="preserve">
    <value>The name of a class that derives from PolicyInjector.</value>
  </data>
  <data name="MatchDataCollectionEmpty" xml:space="preserve">
    <value>The list of matches is empty.</value>
  </data>
  <data name="MatchDataContainsDuplicateMatch" xml:space="preserve">
    <value>The list of matches contains a duplicate value.</value>
  </data>
  <data name="MatchDataContainsEmptyMatch" xml:space="preserve">
    <value>The list of matches contains a match with empty value.</value>
  </data>
  <data name="MatchingRuleCollectionNodeName" xml:space="preserve">
    <value>Matching Rules</value>
  </data>
  <data name="MemberNameMatchesDescription" xml:space="preserve">
    <value>The collection of method names that are used to match.</value>
  </data>
  <data name="MemberNameMatchingRuleNodeName" xml:space="preserve">
    <value>Member Name Matching Rule</value>
  </data>
  <data name="MethodSignatureIgnoreCaseDescription" xml:space="preserve">
    <value>True if matching the methods name should be done in a case-insensitive manner, otherwise false.</value>
  </data>
  <data name="MethodSignatureMatchDescription" xml:space="preserve">
    <value>The name of the method that is used to match.</value>
  </data>
  <data name="MethodSignatureMatchingRuleNodeName" xml:space="preserve">
    <value>Method Signature Matching Rule</value>
  </data>
  <data name="MustHaveDefaultInjectorIfInjectorsAreDefined" xml:space="preserve">
    <value>You must specify the default injector if any injectors are configured.</value>
  </data>
  <data name="NamespaceMatchesDescription" xml:space="preserve">
    <value>The collection of namespace names that are used to match.</value>
  </data>
  <data name="NamespaceMatchingRuleNodeName" xml:space="preserve">
    <value>Namespace Matching Rule</value>
  </data>
  <data name="ParameterTypeCollectionContainsDuplicateName" xml:space="preserve">
    <value>The collection of parameter types contains a duplicate entry.</value>
  </data>
  <data name="ParameterTypeCollectionContainsEmptyName" xml:space="preserve">
    <value>The collection of parameter types contains an entry with an empty name.</value>
  </data>
  <data name="ParameterTypeCollectionContainsEmptyType" xml:space="preserve">
    <value>The collection of parameter types contains an empty entry.</value>
  </data>
  <data name="ParameterTypeMatchDescription" xml:space="preserve">
    <value>The type of parameters for the method to match.</value>
  </data>
  <data name="ParameterTypeMatchingRuleNodeName" xml:space="preserve">
    <value>Parameter Type Matching Rule</value>
  </data>
  <data name="ParameterTypesDescription" xml:space="preserve">
    <value>The collection of parameter types that should match the methods signature.</value>
  </data>
  <data name="PolicyCollectionNodeDescription" xml:space="preserve">
    <value>The collection of  policies</value>
  </data>
  <data name="PolicyCollectionNodeName" xml:space="preserve">
    <value>Policies</value>
  </data>
  <data name="PolicyInjectionSettingsNodeName" xml:space="preserve">
    <value>Policy Injection Application Block</value>
  </data>
  <data name="PolicyNodeName" xml:space="preserve">
    <value>Policy</value>
  </data>
  <data name="PropertyMatchingRuleNodeName" xml:space="preserve">
    <value>Property Matching Rule</value>
  </data>
  <data name="PropertyRuleMatchesDescription" xml:space="preserve">
    <value>The collection of property names to match the name of a property.</value>
  </data>
  <data name="RemotingInjectorNodeName" xml:space="preserve">
    <value>Remoting Policy Injector</value>
  </data>
  <data name="ReturnTypeIgnoreCaseDescription" xml:space="preserve">
    <value>True if matching the return value should be done in a case-insensitive manner, otherwise false.</value>
  </data>
  <data name="ReturnTypeMatchDescription" xml:space="preserve">
    <value>The type name that should match a methods return type.</value>
  </data>
  <data name="ReturnTypeMatchingRuleNodeName" xml:space="preserve">
    <value>Return Type Matching Rule</value>
  </data>
  <data name="RuleProviderExtensionsDescription" xml:space="preserve">
    <value>Gets or sets the custom configuration attributes for this type.</value>
  </data>
  <data name="RuleProviderTypeNameDescription" xml:space="preserve">
    <value>The name of a class that implements the IMatchingRule interface.</value>
  </data>
  <data name="SearchInheritanceChainDescription" xml:space="preserve">
    <value>True if the inheritance chain of a method should be searched for the attribute to match, otherwise false.</value>
  </data>
  <data name="TagAttributeIgnoreCaseDescription" xml:space="preserve">
    <value>True if matching the tagvalue should be done in a case-insensitive manner, otherwise false.</value>
  </data>
  <data name="TagAttributeMatchDescription" xml:space="preserve">
    <value>The tag attribute value to match.</value>
  </data>
  <data name="TagAttributeMatchingRuleCommandText" xml:space="preserve">
    <value>Tag Attribute Matching Rule</value>
  </data>
  <data name="TagAttributeMatchingRuleCommandTextLong" xml:space="preserve">
    <value>Add Tag Attribute Matching Rule.</value>
  </data>
  <data name="TagAttributeMatchingRuleNodeName" xml:space="preserve">
    <value>Tag Attribute Matching Rule</value>
  </data>
  <data name="TypeMatchesDescription" xml:space="preserve">
    <value>The collection of type names to match with the methods declaring type.</value>
  </data>
  <data name="TypeMatchingRuleNodeName" xml:space="preserve">
    <value>Type Matching Rule</value>
  </data>
</root>