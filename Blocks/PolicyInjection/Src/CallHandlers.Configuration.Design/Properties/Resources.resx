<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddAuthorizationCallHandlerCommandText" xml:space="preserve">
    <value>Authorization Handler</value>
  </data>
  <data name="AddAuthorizationCallHandlerCommandTextLong" xml:space="preserve">
    <value>Add Authorization Handler.</value>
  </data>
  <data name="AddCachingCallHandlerCommandText" xml:space="preserve">
    <value>Caching Handler</value>
  </data>
  <data name="AddCachingCallHandlerCommandTextLong" xml:space="preserve">
    <value>Add Caching Handler.</value>
  </data>
  <data name="AddCustomCallHandlerCommandText" xml:space="preserve">
    <value>Custom Handler</value>
  </data>
  <data name="AddCustomCallHandlerCommandTextLong" xml:space="preserve">
    <value>Add Custom Handler.</value>
  </data>
  <data name="AddExceptionCallHandleCommandText" xml:space="preserve">
    <value>Exception Handling Handler</value>
  </data>
  <data name="AddExceptionCallHandleCommandTextLong" xml:space="preserve">
    <value>Add Exception Handling Handler.</value>
  </data>
  <data name="AddLogCallHandlerCommandText" xml:space="preserve">
    <value>Logging Handler</value>
  </data>
  <data name="AddLogCallHandlerCommandTextLong" xml:space="preserve">
    <value>Add Logging Handler.</value>
  </data>
  <data name="AddPerformanceCounterCallHandlerCommandText" xml:space="preserve">
    <value>Performance Counters Handler</value>
  </data>
  <data name="AddPerformanceCounterCallHandlerCommandTextLong" xml:space="preserve">
    <value>Add Performance Counters Handler.</value>
  </data>
  <data name="AddValidationCallHandlerCommandText" xml:space="preserve">
    <value>Validation Handler</value>
  </data>
  <data name="AddValidationCallHandlerCommandTextLong" xml:space="preserve">
    <value>Add Validation Handler.</value>
  </data>
  <data name="AfterMessageDescription" xml:space="preserve">
    <value>The message which is logged after executing the method.</value>
  </data>
  <data name="AuthorizationCallHandlerNodeName" xml:space="preserve">
    <value>Authorization Handler</value>
  </data>
  <data name="AuthorizationProviderDescription" xml:space="preserve">
    <value>The name of the authorization provider that is used to authenticate the caller.

(none) indicates the default authorization provider should be used.</value>
  </data>
  <data name="BeforeMessageDescription" xml:space="preserve">
    <value>The message which is logged before executing the method.</value>
  </data>
  <data name="CachingCallHandlerNodeName" xml:space="preserve">
    <value>Caching Handler</value>
  </data>
  <data name="CategoriesDescription" xml:space="preserve">
    <value>The names of the categories that is used for logging.</value>
  </data>
  <data name="CategoryGeneral" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="CounterCategoryNameDescription" xml:space="preserve">
    <value>The category name used for the performance counters.</value>
  </data>
  <data name="CustomCallHandlerNodeName" xml:space="preserve">
    <value>Custom Handler</value>
  </data>
  <data name="ExceptionCallHandlerNodeName" xml:space="preserve">
    <value>Exception Handling Handler</value>
  </data>
  <data name="ExceptionPolicyNameDescription" xml:space="preserve">
    <value>The name of the exception policy that is used to handle exceptions.</value>
  </data>
  <data name="ExpirationTimeDescription" xml:space="preserve">
    <value>The expiration time for cached values.</value>
  </data>
  <data name="IncludeCallStackDescription" xml:space="preserve">
    <value>True if the callstack should be included in a logmessage, otherwise false.</value>
  </data>
  <data name="IncludeCallTimeDescription" xml:space="preserve">
    <value>True if the calltime should be included in a logmessage, otherwise false.</value>
  </data>
  <data name="IncludeParameterValuesDescription" xml:space="preserve">
    <value>True if the parameter values should be included in a logmessage, otherwise false.</value>
  </data>
  <data name="IncrementAverageCallDurationDescription" xml:space="preserve">
    <value>True if a 'average seconds / call' counter should be maintained, otherwise false.</value>
  </data>
  <data name="IncrementCallsPerSecondDescription" xml:space="preserve">
    <value>True if a '# calls / second' counter should be maintained, otherwise false.</value>
  </data>
  <data name="IncrementExceptionsPerSecondDescription" xml:space="preserve">
    <value>True if a '# exceptions / second' counter should be maintained, otherwise false.</value>
  </data>
  <data name="IncrementNumberOfCallsDescription" xml:space="preserve">
    <value>True if a '# of calls' counter should be maintained, otherwise false.</value>
  </data>
  <data name="IncrementTotalExceptionsDescription" xml:space="preserve">
    <value>True if a '# of exceptions' should be maintained, otherwise false.</value>
  </data>
  <data name="InstanceNameDescription" xml:space="preserve">
    <value>The instance name used for the performance counters. 

The value can contain the following tokens:  {appdomain}, {assembly}, {namespace}, {type}, {method}.</value>
  </data>
  <data name="LogBehaviorDescription" xml:space="preserve">
    <value>Before if logging only should be done before the message is executed. 
After if logging should be done only after the message is executed. 
BeforeAndAfter if logging should be done both before and after the message is executed.</value>
  </data>
  <data name="LogCallHandlerNodeName" xml:space="preserve">
    <value>Logging Handler</value>
  </data>
  <data name="LogCategoriesContainsDuplicateMatch" xml:space="preserve">
    <value>The collection of categories contains a duplicate category.</value>
  </data>
  <data name="LogCategoriesContainsEmptyMatch" xml:space="preserve">
    <value>The collection of categories contains an empty category.</value>
  </data>
  <data name="OperationNameDescription" xml:space="preserve">
    <value>The name of the operation that is used to authenticate the caller.

The value can contain the following tokens:  {appdomain}, {assembly}, {namespace}, {type}, {method}.</value>
  </data>
  <data name="PerformanceCounterCallHandlerNodeName" xml:space="preserve">
    <value>Performance Counters Handler</value>
  </data>
  <data name="PriorityDescription" xml:space="preserve">
    <value>The priority under which logging is done.</value>
  </data>
  <data name="RuleSetDescription" xml:space="preserve">
    <value>The ruleset that should be used to validate. An empty string uses the default ruleset.</value>
  </data>
  <data name="SeverityDescription" xml:space="preserve">
    <value>The severity under which logging is done.</value>
  </data>
  <data name="SpecificationSourceDescription" xml:space="preserve">
    <value>Configuration if the configuration file as a source for validation. 
Attributes if the object metadata as a source for validation.
Both if both configuration and metadata as a source for validation.</value>
  </data>
  <data name="UseTotalCounterDescription" xml:space="preserve">
    <value>True if a 'Total' counter should be maintained, otherwise false.</value>
  </data>
  <data name="ValidationCallHandlerNodeName" xml:space="preserve">
    <value>Validation Handler</value>
  </data>
</root>