<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddCachingBlockCommandDefaultCacheName" xml:space="preserve">
    <value>In-Memory Cache</value>
  </data>
  <data name="AddCachingSettings" xml:space="preserve">
    <value>Add Caching Settings for Silverlight</value>
  </data>
  <data name="CachingSettingsCachesDescription" xml:space="preserve">
    <value>Object Caches</value>
  </data>
  <data name="CachingSettingsCachesDisplayName" xml:space="preserve">
    <value>Object Caches</value>
  </data>
  <data name="CachingSettingsDefaultCacheDescription" xml:space="preserve">
    <value>The default Object Cache instance to used when code does not specify a named Object Cache</value>
  </data>
  <data name="CachingSettingsDefaultCacheDisplayName" xml:space="preserve">
    <value>Default Cache Name</value>
  </data>
  <data name="CachingSettingsDescription" xml:space="preserve">
    <value>Configuration settings for the Caching for Silverlight Application Block</value>
  </data>
  <data name="CachingSettingsDisplayName" xml:space="preserve">
    <value>Caching Settings for Silverlight</value>
  </data>
  <data name="CustomCacheDataDescription" xml:space="preserve">
    <value>A custom class that persists the cached data, and is added to Enterprise Library.</value>
  </data>
  <data name="CustomCacheDataDisplayName" xml:space="preserve">
    <value>Custom Cache</value>
  </data>
  <data name="CustomCacheDataTypeNameDescription" xml:space="preserve">
    <value>The fully qualified type name of the Name Type Configuration Element.</value>
  </data>
  <data name="CustomCacheDataTypeNameDisplayName" xml:space="preserve">
    <value>Type Name</value>
  </data>
  <data name="ExpirationPollingIntervalDescription" xml:space="preserve">
    <value>Frequency of expiration polling cycle.</value>
  </data>
  <data name="ExpirationPollingIntervalDisplayName" xml:space="preserve">
    <value>Expiration Polling Interval</value>
  </data>
  <data name="InMemoryCacheDataDescription" xml:space="preserve">
    <value>The InMemoryCache has many properties and methods for accessing the cache that will be familiar to you if you have used the Desktop's MemoryCache class. It is somewhat similar to the System.Runtime.Caching.MemoryCache class available in the .NET Framework in the Desktop.</value>
  </data>
  <data name="InMemoryCacheDataDisplayName" xml:space="preserve">
    <value>In-Memory Cache</value>
  </data>
  <data name="IsolatedStorageCacheDataDescription" xml:space="preserve">
    <value>Just like the InMemoryCache, the IsolatedStorage cache has many properties and methods for accessing the cache that will be familiar to you if you have used the desktop's System.Runtime.Caching.MemoryCache class. All the items are saved in-memory but are also saved to the Isolated Cache of Silverlight at the exact same time, allowing to easily reloads the object when the application starts.</value>
  </data>
  <data name="IsolatedStorageCacheDataDisplayName" xml:space="preserve">
    <value>Isolated Storage Cache</value>
  </data>
  <data name="ItemsLeftAfterScavengingDescription" xml:space="preserve">
    <value>The number of items to be left after scavenging.</value>
  </data>
  <data name="ItemsLeftAfterScavengingDisplayName" xml:space="preserve">
    <value>Items left after scavenging</value>
  </data>
  <data name="MaxItemsBeforeScavengingDescription" xml:space="preserve">
    <value>Maximum number of items in cache before an add causes scavenging to take place.</value>
  </data>
  <data name="MaxItemsBeforeScavengingDisplayName" xml:space="preserve">
    <value>Max items before scavenging</value>
  </data>
  <data name="MaxSizeInBytesDescription" xml:space="preserve">
    <value>Maximum size in bytes before replacing previous cached items.</value>
  </data>
  <data name="MaxSizeInBytesDisplayName" xml:space="preserve">
    <value>Max size (in bytes)</value>
  </data>
  <data name="PercentOfQuotaUsedAfterScavengingDescription" xml:space="preserve">
    <value>Percentage of quota after scavenging.</value>
  </data>
  <data name="PercentOfQuotaUsedAfterScavengingDisplayName" xml:space="preserve">
    <value>Percentage of quota after scavenging</value>
  </data>
  <data name="PercentOfQuotaUsedBeforeScavengingDescription" xml:space="preserve">
    <value>Percentage of quota used before scavenging.</value>
  </data>
  <data name="PercentOfQuotaUsedBeforeScavengingDisplayName" xml:space="preserve">
    <value>Percentage of quota used before scavenging</value>
  </data>
  <data name="SerializerTypeNameDescription" xml:space="preserve">
    <value>The type name of the serializer to use for cache entries serialization.</value>
  </data>
  <data name="SerializerTypeNameDisplayName" xml:space="preserve">
    <value>Serializer type name</value>
  </data>
  <data name="ValidationMaxSizeIsOverSilverlightDefaultQuota" xml:space="preserve">
    <value>The maximum size currently specified for the Isolated Storage Cache is above the default Silverlight Isolated Storage size of 1 MB. Note that the minimum value between the maximum size and the Silverlight Isolated Storage quota will be used as the actual maximum cache size.</value>
  </data>
  <data name="ValidationNumericValueIsOverZero" xml:space="preserve">
    <value>The specified value must be over 0.</value>
  </data>
  <data name="ValidationPercentage" xml:space="preserve">
    <value>The specified value must be between 0 and 100.</value>
  </data>
</root>