<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddLoggingSettings" xml:space="preserve">
    <value>Add Logging Settings for Silverlight</value>
  </data>
  <data name="IsolatedStorageBufferMaxSizeInKilobytesDescription" xml:space="preserve">
    <value>The maximum size in kilobytes to be used when storing entries into the isolated storage as a backup strategy.</value>
  </data>
  <data name="IsolatedStorageBufferMaxSizeInKilobytesDisplayName" xml:space="preserve">
    <value>Isolated Storage Buffer Max Size In Kilobytes</value>
  </data>
  <data name="IsolatedStorageTraceListenerDataDescription" xml:space="preserve">
    <value>A trace listener that logs entries to a log entry repository in isolated storage.

Older entries will be automatically replaced by new ones if the specified maximum size is reached.</value>
  </data>
  <data name="IsolatedStorageTraceListenerDataDisplayName" xml:space="preserve">
    <value>Isolated Storage Trace Listener</value>
  </data>
  <data name="LoggingServiceFactoryDescription" xml:space="preserve">
    <value>The WCF endpoint configuration name. This configuration must be present in the ServiceReferences.ClientConfig file of the main application. 
If you need more flexibility for configuring the logging service factory, you should provide an instance of ILoggingServiceFactory, which should be set in XAML directly and cannot be set from the Enterprise Library Configuration Tool.</value>
  </data>
  <data name="LoggingServiceFactoryDisplayName" xml:space="preserve">
    <value>Logging Service Factory</value>
  </data>
  <data name="MaxElementsInBufferDescription" xml:space="preserve">
    <value>The maximum amount of elements that will be buffered in memory for when there are connectivity issues that prevent the listener from submitting the log entries.</value>
  </data>
  <data name="MaxElementsInBufferDisplayName" xml:space="preserve">
    <value>Max Elements In Buffer</value>
  </data>
  <data name="MaxSizeInKilobytesDescription" xml:space="preserve">
    <value>The maximum size in kilobytes to be used when storing entries.</value>
  </data>
  <data name="MaxSizeInKilobytesDisplayName" xml:space="preserve">
    <value>Max Size In Kilobytes</value>
  </data>
  <data name="NotificationTraceListenerDataDescription" xml:space="preserve">
    <value>A trace listener that receive and sent back the submitted log entries to a registered ITraceDispatcher implementation instance.</value>
  </data>
  <data name="NotificationTraceListenerDataDisplayName" xml:space="preserve">
    <value>Notification Trace Listener</value>
  </data>
  <data name="RemoteServiceTraceListenerDataDescription" xml:space="preserve">
    <value>A trace listener that send related log entries to a WCF service.</value>
  </data>
  <data name="RemoteServiceTraceListenerDataDisplayName" xml:space="preserve">
    <value>Remote Service Trace Listener</value>
  </data>
  <data name="RepositoryNameDescription" xml:space="preserve">
    <value>The name of the repository for entries.</value>
  </data>
  <data name="RepositoryNameDisplayName" xml:space="preserve">
    <value>Repository Name</value>
  </data>
  <data name="SendImmediatelyDescription" xml:space="preserve">
    <value>A value indicating if the log entries should be sent shortly after they have been logged, or else wait until the Submit Interval value has elapsed.

Set this value to false in order to buffer as many entries as possible during the SubmitInterval time, and have potentially fewer and larger requests to the server. Set this value to true if you prefer to try to submit the entries as soon as possible, potentially sending only one or few log entries per server call.</value>
  </data>
  <data name="SendImmediatelyDisplayName" xml:space="preserve">
    <value>Send Immediately</value>
  </data>
  <data name="SubmitIntervalDescription" xml:space="preserve">
    <value>The time interval that will be used for submitting the log entries to the server.</value>
  </data>
  <data name="SubmitIntervalDisplayName" xml:space="preserve">
    <value>Submit Interval</value>
  </data>
</root>