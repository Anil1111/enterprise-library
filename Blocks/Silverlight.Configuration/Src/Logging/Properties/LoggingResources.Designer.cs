//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Practices.EnterpriseLibrary.Silverlight.Configuration.Logging.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class LoggingResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal LoggingResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Practices.EnterpriseLibrary.Silverlight.Configuration.Logging.Propertie" +
                            "s.LoggingResources", typeof(LoggingResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add Logging Settings for Silverlight.
        /// </summary>
        internal static string AddLoggingSettings {
            get {
                return ResourceManager.GetString("AddLoggingSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum size in kilobytes to be used when storing entries into the isolated storage as a backup strategy..
        /// </summary>
        internal static string IsolatedStorageBufferMaxSizeInKilobytesDescription {
            get {
                return ResourceManager.GetString("IsolatedStorageBufferMaxSizeInKilobytesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Isolated Storage Buffer Max Size In Kilobytes.
        /// </summary>
        internal static string IsolatedStorageBufferMaxSizeInKilobytesDisplayName {
            get {
                return ResourceManager.GetString("IsolatedStorageBufferMaxSizeInKilobytesDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A trace listener that logs entries to a log entry repository in isolated storage.
        ///
        ///Older entries will be automatically replaced by new ones if the specified maximum size is reached..
        /// </summary>
        internal static string IsolatedStorageTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("IsolatedStorageTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Isolated Storage Trace Listener.
        /// </summary>
        internal static string IsolatedStorageTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("IsolatedStorageTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WCF endpoint configuration name. This configuration must be present in the ServiceReferences.ClientConfig file of the main application. 
        ///If you need more flexibility for configuring the logging service factory, you should provide an instance of ILoggingServiceFactory, which should be set in XAML directly and cannot be set from the Enterprise Library Configuration Tool..
        /// </summary>
        internal static string LoggingServiceFactoryDescription {
            get {
                return ResourceManager.GetString("LoggingServiceFactoryDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logging Service Factory.
        /// </summary>
        internal static string LoggingServiceFactoryDisplayName {
            get {
                return ResourceManager.GetString("LoggingServiceFactoryDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum amount of elements that will be buffered in memory for when there are connectivity issues that prevent the listener from submitting the log entries..
        /// </summary>
        internal static string MaxElementsInBufferDescription {
            get {
                return ResourceManager.GetString("MaxElementsInBufferDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Max Elements In Buffer.
        /// </summary>
        internal static string MaxElementsInBufferDisplayName {
            get {
                return ResourceManager.GetString("MaxElementsInBufferDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum size in kilobytes to be used when storing entries..
        /// </summary>
        internal static string MaxSizeInKilobytesDescription {
            get {
                return ResourceManager.GetString("MaxSizeInKilobytesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Max Size In Kilobytes.
        /// </summary>
        internal static string MaxSizeInKilobytesDisplayName {
            get {
                return ResourceManager.GetString("MaxSizeInKilobytesDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A trace listener that receive and sent back the submitted log entries to a registered ITraceDispatcher implementation instance..
        /// </summary>
        internal static string NotificationTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("NotificationTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Notification Trace Listener.
        /// </summary>
        internal static string NotificationTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("NotificationTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A trace listener that send related log entries to a WCF service..
        /// </summary>
        internal static string RemoteServiceTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("RemoteServiceTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remote Service Trace Listener.
        /// </summary>
        internal static string RemoteServiceTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("RemoteServiceTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the repository for entries..
        /// </summary>
        internal static string RepositoryNameDescription {
            get {
                return ResourceManager.GetString("RepositoryNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Repository Name.
        /// </summary>
        internal static string RepositoryNameDisplayName {
            get {
                return ResourceManager.GetString("RepositoryNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value indicating if the log entries should be sent shortly after they have been logged, or else wait until the Submit Interval value has elapsed.
        ///
        ///Set this value to false in order to buffer as many entries as possible during the SubmitInterval time, and have potentially fewer and larger requests to the server. Set this value to true if you prefer to try to submit the entries as soon as possible, potentially sending only one or few log entries per server call..
        /// </summary>
        internal static string SendImmediatelyDescription {
            get {
                return ResourceManager.GetString("SendImmediatelyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Send Immediately.
        /// </summary>
        internal static string SendImmediatelyDisplayName {
            get {
                return ResourceManager.GetString("SendImmediatelyDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The time interval that will be used for submitting the log entries to the server..
        /// </summary>
        internal static string SubmitIntervalDescription {
            get {
                return ResourceManager.GetString("SubmitIntervalDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Submit Interval.
        /// </summary>
        internal static string SubmitIntervalDisplayName {
            get {
                return ResourceManager.GetString("SubmitIntervalDisplayName", resourceCulture);
            }
        }
    }
}
