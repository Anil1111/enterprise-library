//===============================================================================
// Microsoft patterns & practices Enterprise Library
// Exception Handling Application Block QuickStart
//===============================================================================
// Copyright © Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4923
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExceptionHandlingQuickStart.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ExceptionHandlingQuickStart.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scenario: Propagate original exception
        ///
        ///1. UI layer calls into business layer.
        ///
        ///2. A System.Exception occurs and is detected in the business layer.
        ///
        ///3. The business layer specifies the &quot;Propagate Policy&quot; as the exception handling policy.
        ///
        ///4. The &quot;Propagate Policy&quot; is configured to recommend a rethrow upon return from processing the exception handlers.
        ///
        ///5. Control is returned to the business layer, which rethrows the original exception.
        ///
        ///6. The original exception is caught and displayed.
        ///.
        /// </summary>
        internal static string PropagateOriginalExceptionText {
            get {
                return ResourceManager.GetString("PropagateOriginalExceptionText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scenario: Replace the original exception with another before propagating
        ///
        ///1. UI layer calls into business layer.
        ///
        ///2. A SecurityException exception occurs and is detected in the business layer.
        ///
        ///3. The business layer specifies the &quot;Replace Policy&quot; as the exception handling policy.
        ///
        ///4. The &quot;Replace Policy&quot; is configured to use a replace handler to replace the original exception with an ApplicationException exception.
        ///
        ///5. The rethrowAction is set to &quot;Throw&quot;, resulting in the new exception being throw [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ReplaceExceptionText {
            get {
                return ResourceManager.GetString("ReplaceExceptionText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scenario: Process and resume execution
        ///
        ///1. UI layer calls into business layer.
        ///
        ///2. A SecurityException occurs and is detected in the business layer.
        ///
        ///3. The business layer specifies the &quot;Handle and Resume Policy&quot; as the exception handling policy.
        ///
        ///4. The &quot;Handle and Resume Policy&quot; is configured with a rethrowAction of &quot;None&quot;, resulting in execution being resumed upon completion of the handler chain execution..
        /// </summary>
        internal static string SuppressExceptionText {
            get {
                return ResourceManager.GetString("SuppressExceptionText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scenario: Wrap the original exception with another before propagating
        ///
        ///1. UI layer calls into business layer.
        ///
        ///2. A DBConcurrencyException occurs and is detected in the business layer.
        ///
        ///3. The business layer specifies the &quot;Wrap Policy&quot; as the exception handling policy.
        ///
        ///4. The Wrap Policy is configured to use a wrap handler to wrap the original exception with a BusinessLayerException exception.
        ///
        ///5. The rethrowAction is set to &quot;Throw&quot;, resulting in the BusinessLayerException exception being thrown  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WrapExceptionText {
            get {
                return ResourceManager.GetString("WrapExceptionText", resourceCulture);
            }
        }
    }
}
