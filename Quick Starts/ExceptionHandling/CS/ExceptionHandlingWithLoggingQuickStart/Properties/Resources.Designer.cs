//===============================================================================
// Microsoft patterns & practices Enterprise Library
// Exception Handling Application Block QuickStart
//===============================================================================
// Copyright © Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4923
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExceptionHandlingQuickStart.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ExceptionHandlingQuickStart.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Placeholder.
        /// </summary>
        internal static string GlobalErrorHandlerText {
            get {
                return ResourceManager.GetString("GlobalErrorHandlerText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scenario: Log exception
        ///
        ///1. An exception occurs and is detected in the UI layer.
        ///
        ///2. The UI layer specifies the &quot;Log Only Policy&quot; as the exception handling policy.
        ///
        ///3. The &quot;Log Only Policy&quot; is configured to log the exception and return to the application without recommending a rethrow.
        ///
        ///4. Control is returned to the UI layer.
        ///.
        /// </summary>
        internal static string LogExceptionText {
            get {
                return ResourceManager.GetString("LogExceptionText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scenario: Notify the user when an exception occurs
        ///
        ///1. An exception occurs and is detected in the Business layer.
        ///
        ///2. The Business layer specifies the &quot;Notify Policy&quot; as the exception handling policy.
        ///
        ///3. The &quot;Notify Policy&quot; is configured to first log the exception, then replace the exception with a new one, and finally return to the application by recommending a rethrow.
        ///
        ///4. The exception is propagated to and caught by the UI layer.
        ///
        ///5. The UI layer catches the exception and calls the &quot;Global Pol [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NotifyUserText {
            get {
                return ResourceManager.GetString("NotifyUserText", resourceCulture);
            }
        }
    }
}
